// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebServer.Data;

#nullable disable

namespace WebServer.Migrations
{
    [DbContext(typeof(WaterDbContext))]
    partial class WaterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Business.Entities.Consumers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Ref_KatoId")
                        .HasColumnType("integer");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Ref_KatoId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Consumers");
                });

            modelBuilder.Entity("WebServer.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Bin")
                        .HasColumnType("text");

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desctiption")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Примечания");

                    b.Property<string>("FullNameKk")
                        .HasColumnType("text");

                    b.Property<string>("FullNameRu")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<long>("KatoCode")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("WebServer.Models.ActionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("ActionLogs");
                });

            modelBuilder.Entity("WebServer.Models.Pipeline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desctiption")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Примечания");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("NewWastewaterNetworkLength")
                        .HasColumnType("numeric")
                        .HasComment("водоотведения, км");

                    b.Property<decimal>("NewWaterSupplyNetworkLength")
                        .HasColumnType("numeric")
                        .HasComment("Общая протяженность построенных (новых) сетей в отчетном году, км, водоснабжения, км");

                    b.Property<decimal>("ReconstructedNetworkLength")
                        .HasColumnType("numeric")
                        .HasComment("Общая протяженность реконструированных (замененных) сетей в отчетном году, км, водоснабжения, км");

                    b.Property<decimal>("ReconstructedWastewaterNetworkLength")
                        .HasColumnType("numeric")
                        .HasComment("водоотведения, км");

                    b.Property<decimal>("RepairedWastewaterNetworkLength")
                        .HasColumnType("numeric")
                        .HasComment("водоотведения, км");

                    b.Property<decimal>("RepairedWaterSupplyNetworkLength")
                        .HasColumnType("numeric")
                        .HasComment("Общая протяженность отремонтированных (текущий/капитальный ремонт) сетей в отчетном году, км, водоснабжения, км");

                    b.Property<decimal>("TotalPipelineLength")
                        .HasColumnType("numeric")
                        .HasComment("Протяженность водопроводных сетей, км (по состоянию на конец отчетного года),общая, км");

                    b.Property<decimal>("TotalPopulation")
                        .HasColumnType("numeric")
                        .HasComment("численность населения (вся)");

                    b.Property<decimal>("TotalSewerNetworkLength")
                        .HasColumnType("numeric")
                        .HasComment("Протяженность канализационных сетей, км (по состоянию на конец отчетного года),общая, км");

                    b.Property<decimal>("WornPipelineLength")
                        .HasColumnType("numeric")
                        .HasComment("в том числе изношенных, км");

                    b.Property<decimal>("WornSewerNetworkLength")
                        .HasColumnType("numeric")
                        .HasComment("в том числе изношенных, км");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("Pipelines");
                });

            modelBuilder.Entity("WebServer.Models.Ref_Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<string>("NameKk")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RefStreetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RefStreetId");

                    b.ToTable("Ref_Buildings");
                });

            modelBuilder.Entity("WebServer.Models.Ref_Kato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("Code")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReportable")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("NameKk")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Ref_Katos");
                });

            modelBuilder.Entity("WebServer.Models.Ref_Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<string>("NameKk")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ref_Statuses");
                });

            modelBuilder.Entity("WebServer.Models.Ref_Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<string>("NameKk")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RefKatoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RefKatoId");

                    b.ToTable("Ref_Streets");
                });

            modelBuilder.Entity("WebServer.Models.Report_Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desctiption")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Примечания");

                    b.Property<bool>("HasStreets")
                        .HasColumnType("boolean")
                        .HasComment("Наличие улиц в селе");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RefKatoId")
                        .HasColumnType("integer");

                    b.Property<int>("RefStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("ReportMonthId")
                        .HasColumnType("integer");

                    b.Property<int>("ReportYearId")
                        .HasColumnType("integer");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SupplierId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RefKatoId");

                    b.HasIndex("RefStatusId");

                    b.HasIndex("SupplierId1");

                    b.ToTable("Report_Forms");
                });

            modelBuilder.Entity("WebServer.Models.SettingsValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SettingsValues");
                });

            modelBuilder.Entity("WebServer.Models.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("WebServer.Models.Supply_City_Form1", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desctiption")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Примечания");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RefBuildingId")
                        .HasColumnType("integer");

                    b.Property<int?>("RefStreetId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("RefBuildingId");

                    b.HasIndex("RefStreetId");

                    b.ToTable("Supply_City_Form1");
                });

            modelBuilder.Entity("WebServer.Models.Supply_City_Form2", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<int?>("CentralWaterSupplySubscribers")
                        .HasColumnType("integer")
                        .HasComment("Кол-во абонентов, охваченных централизованным водоснабжением (единиц)");

                    b.Property<int?>("CentralizedWaterNumber")
                        .HasColumnType("integer")
                        .HasComment("Количество населения имеющих доступ к централизованному водоснабжению (человек)");

                    b.Property<bool?>("CoverageWater")
                        .HasColumnType("boolean")
                        .HasComment("Охваченные централизованным водоснабжением (0-1)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desctiption")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Примечания");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<int?>("IndividualWaterMetersInstalled")
                        .HasColumnType("integer")
                        .HasComment("Всего установлено индивидуальных приборов учета воды по состоянию на конец отчетного года (единиц)");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVillage")
                        .HasColumnType("boolean")
                        .HasComment("Признак если True-Село, Flase-Город");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RefBuildingId")
                        .HasColumnType("integer");

                    b.Property<int?>("RefStreetId")
                        .HasColumnType("integer");

                    b.Property<int?>("RemoteDataTransmissionMeters")
                        .HasColumnType("integer")
                        .HasComment("в том числе с дистанционной передачей данных в АСУЭ обслуживающего предприятия (единиц)");

                    b.Property<int?>("RuralPopulation")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("RefBuildingId");

                    b.HasIndex("RefStreetId");

                    b.ToTable("Supply_City_Form2");
                });

            modelBuilder.Entity("WebServer.Models.Supply_City_Form3", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<int?>("CoverageMetersRemoteData")
                        .HasColumnType("integer")
                        .HasComment("в том числе с дистанционной передачей данных в АСУЭ обслуживающего предприятия (единиц)");

                    b.Property<int?>("CoverageMetersTotalCumulative")
                        .HasColumnType("integer")
                        .HasComment("всего с нарастающим (единиц)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desctiption")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Примечания");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVillage")
                        .HasColumnType("boolean")
                        .HasComment("Признак если True-Село, Flase-Город");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PopulationUsingDeliveredWater")
                        .HasColumnType("integer")
                        .HasComment("Численность населения, проживающего в сельских населенных пунктах, где используют привозную воду");

                    b.Property<int?>("PopulationUsingWellsAndBoreholes")
                        .HasColumnType("integer")
                        .HasComment("Численность населения, проживающего в сельских населенных пунктах, где используют воду из скважин и колодцев");

                    b.Property<int?>("PopulationWithConstructionRefusalProtocols")
                        .HasColumnType("integer")
                        .HasComment("Численность населения, жители которых отказались от строительства ЦВ, установки КБМ и ПРВ (наличие протоколов отказа)");

                    b.Property<int?>("PopulationWithKBM")
                        .HasColumnType("integer")
                        .HasComment("Численность населения, проживающего в сельских населенных пунктах, где установлены КБМ (человек)");

                    b.Property<int?>("PopulationWithPRV")
                        .HasColumnType("integer")
                        .HasComment("Численность населения, проживающего в сельских населенных пунктах, где установлены ПРВ (человек)");

                    b.Property<int?>("RefBuildingId")
                        .HasColumnType("integer");

                    b.Property<int?>("RefStreetId")
                        .HasColumnType("integer");

                    b.Property<int?>("RuralPopulation")
                        .HasColumnType("integer");

                    b.Property<int?>("RuralSettlementsCount")
                        .HasColumnType("integer")
                        .HasComment("Количество сельских населенных пунктов (единиц)");

                    b.Property<int?>("RuralSettlementsWithConstructionRefusalProtocols")
                        .HasColumnType("integer")
                        .HasComment("Количество сельских населенных пунктов, жители которых отказались от строительства ЦВ, установки КБМ и ПРВ (наличие протоколов отказа)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("RefBuildingId");

                    b.HasIndex("RefStreetId");

                    b.ToTable("Supply_City_Form3");
                });

            modelBuilder.Entity("WebServer.Models.Supply_City_Form4", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<int>("CoverageHouseholdInstalledBuildings")
                        .HasColumnType("integer")
                        .HasComment("Количество зданий и сооружений с установленными общедомовыми приборами учета (единиц)");

                    b.Property<int>("CoverageHouseholdInstalledCount")
                        .HasColumnType("integer")
                        .HasComment("Количество установленных общедомовых приборов учета (единиц)");

                    b.Property<int>("CoverageHouseholdNeedNumberBuildings")
                        .HasColumnType("integer")
                        .HasComment("Количество зданий и сооружений, подлежащих к установке общедомовых приборов учета (единиц)");

                    b.Property<int>("CoverageHouseholdRemoteData")
                        .HasColumnType("integer")
                        .HasComment("в том числе с дистанционной передачей данных в АСУЭ обслуживающего предприятия (единиц)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desctiption")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Примечания");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RefBuildingId")
                        .HasColumnType("integer");

                    b.Property<int>("RefStreetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("RefBuildingId");

                    b.HasIndex("RefStreetId");

                    b.ToTable("Supply_City_Form4");
                });

            modelBuilder.Entity("WebServer.Models.Supply_City_Form5", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desctiption")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Примечания");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RefBuildingId")
                        .HasColumnType("integer");

                    b.Property<int>("RefStreetId")
                        .HasColumnType("integer");

                    b.Property<bool>("ScadaStations")
                        .HasColumnType("boolean")
                        .HasComment("Насосные станции (0 или 1)");

                    b.Property<bool>("ScadaSupplyNetworks")
                        .HasColumnType("boolean")
                        .HasComment("Сети водоснабжения (0 или 1)");

                    b.Property<bool>("ScadaWaterIntake")
                        .HasColumnType("boolean")
                        .HasComment("Водозабор");

                    b.Property<bool>("ScadaWaterTreatment")
                        .HasColumnType("boolean")
                        .HasComment("Водоподготовка (0 или 1)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("RefBuildingId");

                    b.HasIndex("RefStreetId");

                    b.ToTable("Supply_City_Form5");
                });

            modelBuilder.Entity("WebServer.Models.Tariff_Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desctiption")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Примечания");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TariffAverage")
                        .HasColumnType("numeric")
                        .HasComment("усредненный, тенге/м3");

                    b.Property<decimal>("TariffBudget")
                        .HasColumnType("numeric")
                        .HasComment("бюджетным организациям, тенге/м3");

                    b.Property<decimal>("TariffIndividual")
                        .HasColumnType("numeric")
                        .HasComment("физическим лицам/населению, тенге/м3");

                    b.Property<decimal>("TariffLegal")
                        .HasColumnType("numeric")
                        .HasComment("юридическим лицам, тенге/м3");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("Tariff_Level");
                });

            modelBuilder.Entity("WebServer.Models.Waste_City_Form1", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desctiption")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Примечания");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RefBuildingId")
                        .HasColumnType("integer");

                    b.Property<int>("RefStreetId")
                        .HasColumnType("integer");

                    b.Property<double>("WaterVolume")
                        .HasColumnType("double precision")
                        .HasComment("Объем воды в тысячах кубических метров.");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("RefBuildingId");

                    b.HasIndex("RefStreetId");

                    b.ToTable("Waste_City_Form1");
                });

            modelBuilder.Entity("WebServer.Models.Waste_City_Form2", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ActualWastewaterInflux")
                        .HasColumnType("numeric")
                        .HasComment("Фактически поступило сточных вод в канализационно-очистные сооружения (тыс.м3)");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<int?>("CorporateSubscribers")
                        .HasColumnType("integer")
                        .HasComment("в том числе юридических лиц (единиц)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desctiption")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Примечания");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<int?>("GovernmentOrganizations")
                        .HasColumnType("integer")
                        .HasComment("в том числе GovernmentOrganizations");

                    b.Property<bool?>("HasMechanicalAndBiologicalTreatment")
                        .HasColumnType("boolean")
                        .HasComment("С механической и биологической очист-кой (1-0)");

                    b.Property<bool?>("HasMechanicalTreatment")
                        .HasColumnType("boolean")
                        .HasComment("С механичес-кой очисткой (1-0)");

                    b.Property<bool?>("HasSewageTreatmentFacilities")
                        .HasColumnType("boolean")
                        .HasComment("Наличие канализационно-очистных сооружений, (1-0)");

                    b.Property<int?>("IndividualSubscribers")
                        .HasColumnType("integer")
                        .HasComment("в том числе физических лиц/население (единиц)");

                    b.Property<bool?>("IsConnectedToCentralizedWastewaterSystem")
                        .HasColumnType("boolean")
                        .HasComment("Охваченные централизованным водоотведением (0-1)");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVillage")
                        .HasColumnType("boolean")
                        .HasComment("Признак если True-Село, Flase-Город");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MechanicalAndBiologicalTreatmentFacilitiesCount")
                        .HasColumnType("integer")
                        .HasComment("в том числе с механической и биологической очист-кой (еди-ниц)");

                    b.Property<int?>("MechanicalTreatmentFacilitiesCount")
                        .HasColumnType("integer")
                        .HasComment("в том числе только с механичес-кой очисткой (еди-ниц)");

                    b.Property<decimal?>("NormativelyTreatedWastewaterVolume")
                        .HasColumnType("numeric")
                        .HasComment("Объем сточных вод, соответствующей нормативной очистке по собственному лабораторному мониторингу за отчетный период (тыс.м3)");

                    b.Property<int?>("PopulationCoveredByCentralizedWastewater")
                        .HasColumnType("integer")
                        .HasComment("Численность населения, охваченного централизованным водоотведением, (человек)");

                    b.Property<int?>("PopulationInRuralSettlements")
                        .HasColumnType("integer")
                        .HasComment("Численность населения, проживающего в данных сельских населенных пунктах (человек)");

                    b.Property<int?>("PopulationServedBySewageTreatmentFacilities")
                        .HasColumnType("integer")
                        .HasComment("Числен-ность населе-ния, охваченного действующими канализационно- очистными сооружениями (человек)");

                    b.Property<int?>("RefBuildingId")
                        .HasColumnType("integer");

                    b.Property<int?>("RefStreetId")
                        .HasColumnType("integer");

                    b.Property<int?>("RuralSettlementsWithCentralizedWastewater")
                        .HasColumnType("integer")
                        .HasComment("Кол-во сельских населенных пунктов (единиц)");

                    b.Property<decimal?>("SewageTreatmentCapacity")
                        .HasColumnType("numeric")
                        .HasComment("Производительность канализационно-очистных сооружений (проектная)");

                    b.Property<int?>("SewageTreatmentFacilitiesCount")
                        .HasColumnType("integer")
                        .HasComment("Наличие канализационно- очистных сооружений (единиц)");

                    b.Property<decimal?>("SewageTreatmentFacilitiesWearPercentage")
                        .HasColumnType("numeric")
                        .HasComment("Износ канализационно- очистных сооружений, в %");

                    b.Property<int?>("SubscribersInRuralSettlements")
                        .HasColumnType("integer")
                        .HasComment("Кол-во абонентов, проживающих в данных сельских населенных пунктах (единиц)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("RefBuildingId");

                    b.HasIndex("RefStreetId");

                    b.ToTable("Waste_City_Form2");
                });

            modelBuilder.Entity("WebServer.Models.Waste_City_Form3", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desctiption")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Примечания");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasSewagePumpingStations")
                        .HasColumnType("boolean")
                        .HasComment("Канализационные насосные станции (0 или 1)");

                    b.Property<bool>("HasSewageTreatmentPlants")
                        .HasColumnType("boolean")
                        .HasComment("Канализационно-очистные сооружения (0 или 1)");

                    b.Property<bool>("HasSewerNetworks")
                        .HasColumnType("boolean")
                        .HasComment("Сети канализации (0 или 1)");

                    b.Property<bool>("IsDel")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RefStreetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("RefStreetId");

                    b.ToTable("Waste_City_Form3");
                });

            modelBuilder.Entity("Business.Entities.Consumers", b =>
                {
                    b.HasOne("WebServer.Models.Ref_Kato", "Ref_Kato")
                        .WithMany()
                        .HasForeignKey("Ref_KatoId");

                    b.HasOne("WebServer.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ref_Kato");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WebServer.Models.ActionLog", b =>
                {
                    b.HasOne("WebServer.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WebServer.Models.Pipeline", b =>
                {
                    b.HasOne("WebServer.Models.Report_Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("WebServer.Models.Ref_Building", b =>
                {
                    b.HasOne("WebServer.Models.Ref_Street", "RefStreet")
                        .WithMany()
                        .HasForeignKey("RefStreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefStreet");
                });

            modelBuilder.Entity("WebServer.Models.Ref_Street", b =>
                {
                    b.HasOne("WebServer.Models.Ref_Kato", "RefKato")
                        .WithMany()
                        .HasForeignKey("RefKatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefKato");
                });

            modelBuilder.Entity("WebServer.Models.Report_Form", b =>
                {
                    b.HasOne("WebServer.Models.Ref_Kato", "RefKato")
                        .WithMany()
                        .HasForeignKey("RefKatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServer.Models.Ref_Status", "RefStatus")
                        .WithMany()
                        .HasForeignKey("RefStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServer.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId1");

                    b.Navigation("RefKato");

                    b.Navigation("RefStatus");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WebServer.Models.Supply_City_Form1", b =>
                {
                    b.HasOne("WebServer.Models.Report_Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServer.Models.Ref_Building", "RefBuilding")
                        .WithMany()
                        .HasForeignKey("RefBuildingId");

                    b.HasOne("WebServer.Models.Ref_Street", "RefStreet")
                        .WithMany()
                        .HasForeignKey("RefStreetId");

                    b.Navigation("Form");

                    b.Navigation("RefBuilding");

                    b.Navigation("RefStreet");
                });

            modelBuilder.Entity("WebServer.Models.Supply_City_Form2", b =>
                {
                    b.HasOne("WebServer.Models.Report_Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServer.Models.Ref_Building", "RefBuilding")
                        .WithMany()
                        .HasForeignKey("RefBuildingId");

                    b.HasOne("WebServer.Models.Ref_Street", "RefStreet")
                        .WithMany()
                        .HasForeignKey("RefStreetId");

                    b.Navigation("Form");

                    b.Navigation("RefBuilding");

                    b.Navigation("RefStreet");
                });

            modelBuilder.Entity("WebServer.Models.Supply_City_Form3", b =>
                {
                    b.HasOne("WebServer.Models.Report_Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServer.Models.Ref_Building", "RefBuilding")
                        .WithMany()
                        .HasForeignKey("RefBuildingId");

                    b.HasOne("WebServer.Models.Ref_Street", "RefStreet")
                        .WithMany()
                        .HasForeignKey("RefStreetId");

                    b.Navigation("Form");

                    b.Navigation("RefBuilding");

                    b.Navigation("RefStreet");
                });

            modelBuilder.Entity("WebServer.Models.Supply_City_Form4", b =>
                {
                    b.HasOne("WebServer.Models.Report_Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServer.Models.Ref_Building", "RefBuilding")
                        .WithMany()
                        .HasForeignKey("RefBuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServer.Models.Ref_Street", "RefStreet")
                        .WithMany()
                        .HasForeignKey("RefStreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("RefBuilding");

                    b.Navigation("RefStreet");
                });

            modelBuilder.Entity("WebServer.Models.Supply_City_Form5", b =>
                {
                    b.HasOne("WebServer.Models.Report_Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServer.Models.Ref_Building", "RefBuilding")
                        .WithMany()
                        .HasForeignKey("RefBuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServer.Models.Ref_Street", "RefStreet")
                        .WithMany()
                        .HasForeignKey("RefStreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("RefBuilding");

                    b.Navigation("RefStreet");
                });

            modelBuilder.Entity("WebServer.Models.Tariff_Level", b =>
                {
                    b.HasOne("WebServer.Models.Report_Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("WebServer.Models.Waste_City_Form1", b =>
                {
                    b.HasOne("WebServer.Models.Report_Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServer.Models.Ref_Building", "RefBuilding")
                        .WithMany()
                        .HasForeignKey("RefBuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServer.Models.Ref_Street", "RefStreet")
                        .WithMany()
                        .HasForeignKey("RefStreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("RefBuilding");

                    b.Navigation("RefStreet");
                });

            modelBuilder.Entity("WebServer.Models.Waste_City_Form2", b =>
                {
                    b.HasOne("WebServer.Models.Report_Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServer.Models.Ref_Building", "RefBuilding")
                        .WithMany()
                        .HasForeignKey("RefBuildingId");

                    b.HasOne("WebServer.Models.Ref_Street", "RefStreet")
                        .WithMany()
                        .HasForeignKey("RefStreetId");

                    b.Navigation("Form");

                    b.Navigation("RefBuilding");

                    b.Navigation("RefStreet");
                });

            modelBuilder.Entity("WebServer.Models.Waste_City_Form3", b =>
                {
                    b.HasOne("WebServer.Models.Report_Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServer.Models.Ref_Street", "RefStreet")
                        .WithMany()
                        .HasForeignKey("RefStreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("RefStreet");
                });
#pragma warning restore 612, 618
        }
    }
}
